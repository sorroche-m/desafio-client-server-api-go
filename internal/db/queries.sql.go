// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const buscarCotacaoDolar = `-- name: BuscarCotacaoDolar :many
SELECT id, valor, data FROM cotacao_dolar ORDER BY data DESC LIMIT 1
`

func (q *Queries) BuscarCotacaoDolar(ctx context.Context) ([]CotacaoDolar, error) {
	rows, err := q.db.QueryContext(ctx, buscarCotacaoDolar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CotacaoDolar
	for rows.Next() {
		var i CotacaoDolar
		if err := rows.Scan(&i.ID, &i.Valor, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const buscarCotacaoDolarPorData = `-- name: BuscarCotacaoDolarPorData :one
SELECT id, valor, data FROM cotacao_dolar WHERE data = ?
`

func (q *Queries) BuscarCotacaoDolarPorData(ctx context.Context, data time.Time) (CotacaoDolar, error) {
	row := q.db.QueryRowContext(ctx, buscarCotacaoDolarPorData, data)
	var i CotacaoDolar
	err := row.Scan(&i.ID, &i.Valor, &i.Data)
	return i, err
}

const cadastrarCotacaoDolar = `-- name: CadastrarCotacaoDolar :exec
INSERT INTO cotacao_dolar (valor, data) VALUES (?, ?)
`

type CadastrarCotacaoDolarParams struct {
	Valor float64
	Data  time.Time
}

func (q *Queries) CadastrarCotacaoDolar(ctx context.Context, arg CadastrarCotacaoDolarParams) error {
	_, err := q.db.ExecContext(ctx, cadastrarCotacaoDolar, arg.Valor, arg.Data)
	return err
}
